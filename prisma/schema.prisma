generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Score {
  id       String    @id @default(cuid())
  gameMode String?
  score    Int?
  date     DateTime? @default(now()) @db.Timestamp(6)
  userId   String?
  user     User?     @relation(fields: [userId], references: [id])
}

model Settings {
  id        String   @id @default(cuid())
  boardSize Int?     @default(0)
  sound     Boolean? @default(true)
  timer     Boolean? @default(true)
  backColor Int?     @default(0)
  userId    String?  @unique
  user      User?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Account {
  id                  String  @id
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  oauth_token_secret  String?
  oauth_token         String?
  User                User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
}

model Session {
  id            String   @id
  session_token String   @unique
  user_id       String
  expires       DateTime
  User          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  games         Int?      @default(0)
  Account       Account[]
  scores        Score[]
  Session       Session[]
  settings      Settings?
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
